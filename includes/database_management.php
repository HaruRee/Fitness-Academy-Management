<?php
// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

session_start();

try {
    require '../config/database.php';
} catch (Exception $e) {
    die("Failed to load database config: " . $e->getMessage());
}

try {
    require 'activity_tracker.php';
} catch (Exception $e) {
    die("Failed to load activity tracker: " . $e->getMessage());
}

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['user_id']) || $_SESSION['role'] !== 'Admin') {
    header('Location: login.php');
    exit;
}

// Use the existing database connection from config
if (!isset($conn)) {
    die("Database connection not available. Please check your configuration.");
}

// Use the existing PDO connection
$pdo = $conn;

// Extract database name from the connection or set it directly
$dbname = 'fitness'; // We know this from the config

// Track page view activity
if (isset($_SESSION['user_id'])) {
    try {
        trackPageView($_SESSION['user_id'], 'Database Management');
    } catch (Exception $e) {
        // Log error but don't stop execution
        error_log("Activity tracking failed: " . $e->getMessage());
    }
}

$message = "";
$backupMessage = "";
$restoreMessage = "";

// Handle backup request
if (isset($_GET['action']) && $_GET['action'] === 'backup') {
    try {
        // Debug: Check if we reach this point
        error_log("Backup process started");
        
        // Check database connection
        if (!$pdo) {
            throw new Exception("Database connection not available");
        }
        
        // Test connection
        $pdo->query("SELECT 1");
        error_log("Database connection verified");
        
        // Generate file name
        $backupFile = 'backup_' . $dbname . '_' . date('Y-m-d_H-i-s') . '.sql';        // Clear any output buffers and turn off output buffering
        while (ob_get_level()) {
            ob_end_clean();
        }
        
        // Ensure no errors have been output before setting headers
        if (headers_sent($filename, $linenum)) {
            throw new Exception("Headers already sent in $filename on line $linenum");
        }

        // Send headers first
        header('Content-Description: File Transfer');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename="' . $backupFile . '"');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Pragma: public');
        header('Connection: close');
        
        error_log("Headers sent for backup download");

        // Output SQL header directly
        echo "-- Backup of `$dbname` on " . date('Y-m-d H:i:s') . "\n";
        echo "-- Generated by Fitness Academy Database Management System\n\n";
        echo "SET FOREIGN_KEY_CHECKS = 0;\n\n";

        // Get all table names
        $tables = $pdo->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
        error_log("Found " . count($tables) . " tables");        foreach ($tables as $table) {
            error_log("Processing table: $table");
            
            // Get CREATE TABLE statement
            $createStmt = $pdo->query("SHOW CREATE TABLE `$table`")->fetch(PDO::FETCH_ASSOC);
            echo "--\n-- Table structure for `$table`\n--\n";
            echo "DROP TABLE IF EXISTS `$table`;\n";
            echo $createStmt['Create Table'] . ";\n\n";

            // Get table data in batches to avoid memory issues
            $stmt = $pdo->prepare("SELECT * FROM `$table`");
            $stmt->execute();
            
            $hasData = false;
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                if (!$hasData) {
                    echo "--\n-- Data for `$table`\n--\n";
                    $hasData = true;
                }
                
                $vals = array_map(function ($val) use ($pdo) {
                    return $val === null ? 'NULL' : $pdo->quote($val);
                }, array_values($row));
                echo "INSERT INTO `$table` VALUES (" . implode(",", $vals) . ");\n";
            }
            
            if ($hasData) {
                echo "\n";
            }
        }        echo "SET FOREIGN_KEY_CHECKS = 1;\n";
        echo "-- Backup completed successfully\n";

        // Log the backup activity
        try {
            trackUserActivity($_SESSION['user_id'], 'Database Backup', 'Downloaded database backup: ' . $backupFile);
        } catch (Exception $e) {
            error_log("Failed to track activity: " . $e->getMessage());
        }

        // Clean exit
        exit;

    } catch (PDOException $e) {
        error_log("PDO Error in backup: " . $e->getMessage());
        $backupMessage = "<div class='alert alert-error'>❌ Database Backup Error: " . htmlspecialchars($e->getMessage()) . "</div>";
    } catch (Exception $e) {
        error_log("General Error in backup: " . $e->getMessage());
        $backupMessage = "<div class='alert alert-error'>❌ Backup Error: " . htmlspecialchars($e->getMessage()) . "</div>";
    }
}

// Handle restore request
if (isset($_POST['restore']) && isset($_FILES['sqlfile'])) {
    try {
        $tmpFile = $_FILES['sqlfile']['tmp_name'];
        $fileName = $_FILES['sqlfile']['name'];
        $fileSize = $_FILES['sqlfile']['size'];
        
        if (!file_exists($tmpFile)) {
            throw new Exception("No file uploaded or file missing.");
        }

        // Validate file extension
        if (pathinfo($fileName, PATHINFO_EXTENSION) !== 'sql') {
            throw new Exception("Invalid file type. Please upload a .sql file.");
        }

        // Validate file size (100MB limit)
        if ($fileSize > 104857600) {
            throw new Exception("File size exceeds maximum limit of 100MB.");
        }

        // Validate file content
        $firstLine = fgets(fopen($tmpFile, 'r'));
        if (!preg_match('/^-- Backup of `fitness`/', $firstLine)) {
            throw new Exception("Invalid backup file format. This file doesn't appear to be a valid Fitness Academy backup.");
        }

        // Increase PHP time limit for large files
        set_time_limit(300); // 5 minutes

        // Disable foreign key checks and strict mode temporarily
        $pdo->exec("SET FOREIGN_KEY_CHECKS = 0;");
        $pdo->exec("SET sql_mode = '';" );
        
        // Read file in chunks to handle large files
        $handle = fopen($tmpFile, 'r');
        if ($handle) {
            $query = '';
            $success = true;
            $errorCount = 0;
            
            while (!feof($handle)) {
                $line = fgets($handle);
                
                // Skip comments and empty lines
                if (empty($line) || substr(trim($line), 0, 2) == '--' || substr(trim($line), 0, 1) == '#') {
                    continue;
                }
                
                $query .= $line;
                
                if (substr(trim($line), -1, 1) == ';') {
                    // Execute each complete query
                    try {
                        $stmt = $pdo->prepare($query);
                        $stmt->execute();
                    } catch (PDOException $e) {
                        // Log the error but continue with other queries
                        error_log("Error executing query: " . $e->getMessage() . "\nQuery: " . $query);
                        $errorCount++;
                        if ($errorCount > 10) {
                            throw new Exception("Too many errors occurred during restore (>10). Stopping restore process.");
                        }
                    }
                    $query = '';
                }
            }
            fclose($handle);
            
            if ($errorCount > 0) {
                throw new Exception("Restore completed with {$errorCount} errors. Check error log for details.");
            }
        } else {
            throw new Exception("Could not open backup file for reading.");
        }

        // Re-enable foreign key checks
        $pdo->exec("SET FOREIGN_KEY_CHECKS = 1;");
        
        // Log the restore activity
        trackUserActivity($_SESSION['user_id'], 'Database Restore', 'Restored database from file: ' . $fileName);
        
        $restoreMessage = "<div class='alert alert-success'>✅ Database restore successful! File: " . htmlspecialchars($fileName) . "</div>";
        
    } catch (PDOException $e) {
        error_log("Database Restore Error: " . $e->getMessage());
        $restoreMessage = "<div class='alert alert-error'>❌ Database Restore Error: " . htmlspecialchars($e->getMessage()) . "</div>";
    } catch (Exception $e) {
        error_log("File Error: " . $e->getMessage());
        $restoreMessage = "<div class='alert alert-error'>❌ File Error: " . htmlspecialchars($e->getMessage()) . "</div>";
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Database Management - Admin Dashboard</title>
    <link rel="icon" type="image/png" href="../assets/images/fa_logo.png">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <!-- Prevent caching -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        :root {
            --primary-color: #1e40af;
            --secondary-color: #ff6b6b;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --light-color: #f3f4f6;
            --dark-color: #111827;
            --gray-color: #6b7280;
            --sidebar-width: 280px;
            --header-height: 72px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f3f4f6;
            color: var(--dark-color);
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--dark-color);
            color: white;
            position: fixed;
            height: 100vh;
            top: 0;
            left: 0;
            overflow-y: auto;
            transition: all 0.3s ease;
            z-index: 100;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar-header {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(0, 0, 0, 0.2);
        }

        .sidebar-header h2 {
            font-size: 1.4rem;
            font-weight: 600;
            color: white;
            margin: 0;
        }

        .sidebar-menu {
            padding: 1.5rem 0;
        }

        .sidebar-menu-header {
            padding: 0 1.5rem;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: rgba(255, 255, 255, 0.5);
            margin-bottom: 0.75rem;
            margin-top: 1.25rem;
        }

        .sidebar a {
            display: flex;
            align-items: center;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            transition: all 0.2s ease;
            font-size: 0.95rem;
            border-left: 4px solid transparent;
        }

        .sidebar a:hover,
        .sidebar a.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-left: 4px solid var(--secondary-color);
        }        .sidebar a i {
            width: 24px;
            margin-right: 0.75rem;
            font-size: 1.1rem;
        }

        .user-profile {
            padding: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            margin-top: auto;
        }

        .user-profile img {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            object-fit: cover;
            background: #e2e8f0;
            margin-right: 0.75rem;
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            color: white;
            font-size: 0.95rem;
        }

        .user-role {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
        }

        /* Main Content Styles */
        .main-wrapper {
            flex: 1;
            margin-left: var(--sidebar-width);
            display: flex;
            flex-direction: column;
            padding: 2rem;
            max-width: 100%;
            min-height: 100vh;
            background: #f9fafb;
        }

        .header {
            height: var(--header-height);
            background: white;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 2rem;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            position: sticky;
            top: 0;
            z-index: 90;
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        .header-actions {
            display: flex;
            align-items: center;
        }

        .content {
            flex: 1;
            padding: 2rem;
        }

        /* Cards */
        .card-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .card h2 {
            font-size: 1.25rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

        .card h2 i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
            font-size: 0.95rem;
        }

        .btn i {
            margin-right: 0.5rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #1e3a8a;
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-secondary:hover {
            background-color: #e53e3e;
        }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

        .alert i {
            margin-right: 0.5rem;
        }

        .alert-info {
            background-color: #e0f2fe;
            color: #075985;
            border: 1px solid #bae6fd;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }

        /* Drop Zone */
        .drop-zone {
            border: 2px dashed #d1d5db;
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            background: #f9fafb;
            margin: 1.5rem 0;
        }

        .drop-zone:hover,
        .drop-zone.dragover {
            border-color: var(--primary-color);
            background: #eff6ff;
        }

        .drop-zone i {
            font-size: 3rem;
            color: #9ca3af;
            margin-bottom: 1rem;
            display: block;
        }

        .drop-zone.dragover i {
            color: var(--primary-color);
        }

        .drop-zone input[type="file"] {
            display: none;
        }

        /* Info Box */
        .info-box {
            background: #eff6ff;
            border: 1px solid #bfdbfe;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            color: #1e40af;
        }

        /* Warning Box */
        .warning-box {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .warning-box h3 {
            color: #92400e;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .warning-box p {
            color: #92400e;
            margin: 0;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .main-wrapper {
                margin-left: 0;
            }
            
            .card-grid {
                grid-template-columns: 1fr;
            }
        }    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <h2>Fitness Academy</h2>
        </div>

        <nav class="sidebar-menu">
            <div class="sidebar-menu-header">Dashboard</div>
            <a href="admin_dashboard.php">
                <i class="fas fa-home"></i>
                <span>Overview</span>
            </a>

            <div class="sidebar-menu-header">Management</div>
            <a href="manage_users.php">
                <i class="fas fa-users-cog"></i>
                <span>Manage Users</span>
            </a>
            <a href="member_list.php">
                <i class="fas fa-users"></i>
                <span>Member List</span>
            </a>
            <a href="coach_applications.php">
                <i class="fas fa-user-tie"></i>
                <span>Coach Applications</span>
            </a>
            <a href="admin_video_approval.php">
                <i class="fas fa-video"></i>
                <span>Video Approval</span>
            </a>            <a href="employee_list.php">
                <i class="fas fa-id-card"></i>
                <span>Employee List</span>
            </a>            
            
            <div class="sidebar-menu-header">Reports</div>
            <a href="attendance_dashboard.php">
                <i class="fas fa-chart-line"></i>
                <span>Attendance Reports</span>
            </a>
            <a href="report_generation.php">
                <i class="fas fa-chart-bar"></i>
                <span>Analytics</span>
            </a>
            <a href="transaction_history.php">
                <i class="fas fa-exchange-alt"></i>
                <span>Transactions</span>
            </a>
            <a href="audit_trail.php">
                <i class="fas fa-history"></i>
                <span>Audit Trail</span>
            </a>

            <div class="sidebar-menu-header">Database</div>
            <a href="database_management.php" class="active">
                <i class="fas fa-database"></i>
                <span>Backup & Restore</span>
            </a>            <div class="sidebar-menu-header">Account</div>
            <a href="logout.php">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </a>
        </nav>

        <div class="user-profile">
            <img src="../assets/images/avatar.jpg" alt="Admin" onerror="this.src='../assets/images/fa_logo.png'">
            <div class="user-info">
                <div class="user-name"><?= htmlspecialchars($_SESSION['user_name'] ?? 'Admin') ?></div>
                <div class="user-role">Administrator</div>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <div class="main-wrapper">
        <!-- Header -->
        <header class="header">
            <h1><i class="fas fa-database"></i> Database Management</h1>
            <div class="header-actions">
                <span>Welcome, <?= htmlspecialchars($_SESSION['user_name'] ?? 'Admin') ?></span>
            </div>
        </header>

        <!-- Content -->
        <div class="content">
            <!-- Warning Box -->
            <div class="warning-box">
                <h3><i class="fas fa-exclamation-triangle"></i> Important Notice</h3>
                <p>Database operations are critical system functions. Always test backups and perform operations during maintenance windows. Restoring a database will overwrite existing data.</p>
            </div>

            <!-- Messages -->
            <?= $backupMessage ?>
            <?= $restoreMessage ?>

            <!-- Main Grid -->
            <div class="card-grid">
                <!-- Database Backup -->
                <div class="card">
                    <h2><i class="fas fa-download"></i> Database Backup</h2>
                    <p>Create a complete backup of the database. This will download a .sql file containing all tables and data.</p>
                    
                    <div class="form-group">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            Backup includes: All tables, data, structure, and relationships
                        </div>
                    </div>

                    <a href="?action=backup" class="btn btn-primary">
                        <i class="fas fa-download"></i>
                        Download Database Backup
                    </a>
                </div>

                <!-- Database Restore -->
                <div class="card">
                    <h2><i class="fas fa-upload"></i> Database Restore</h2>
                    <p>Upload and restore a database backup file. This will replace all existing data with the backup data.</p>

                    <form method="post" enctype="multipart/form-data" id="restore-form">
                        <div class="form-group">
                            <label class="form-label">Select SQL Backup File:</label>
                            <div class="drop-zone" id="drop-zone">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <div class="drop-zone-text">
                                    <strong>Choose a .sql file</strong> or drag it here
                                </div>
                                <input type="file" name="sqlfile" id="sqlfile" accept=".sql" required>
                            </div>
                        </div>

                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Warning:</strong> This will replace all existing database data. Make sure you have a current backup before proceeding.
                        </div>

                        <button type="submit" name="restore" class="btn btn-secondary" onclick="return confirm('Are you sure you want to restore the database? This will overwrite all existing data.')">
                            <i class="fas fa-upload"></i>
                            Restore Database
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const dropZone = document.getElementById('drop-zone');
            const fileInput = document.getElementById('sqlfile');
            const dropText = dropZone.querySelector('.drop-zone-text');

            // Click to select file
            dropZone.addEventListener('click', () => fileInput.click());

            // Drag and drop events
            dropZone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropZone.classList.add('dragover');
            });

            dropZone.addEventListener('dragleave', () => {
                dropZone.classList.remove('dragover');
            });

            dropZone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropZone.classList.remove('dragover');
                
                if (e.dataTransfer.files.length) {
                    fileInput.files = e.dataTransfer.files;
                    updateDropZoneText(e.dataTransfer.files[0].name);
                }
            });

            // File input change
            fileInput.addEventListener('change', () => {
                if (fileInput.files.length) {
                    updateDropZoneText(fileInput.files[0].name);
                }
            });

            function updateDropZoneText(fileName) {
                dropText.innerHTML = `<strong>Selected:</strong> ${fileName}`;
            }

            // Form submission confirmation
            document.getElementById('restore-form').addEventListener('submit', function(e) {
                if (!fileInput.files.length) {
                    e.preventDefault();
                    alert('Please select a SQL file to restore.');
                    return false;
                }
            });
        });
    </script>
</body>
</html>


